progress,sub,sup{vertical-align:baseline}button,hr,input{overflow:visible}.titles,.wrapper,sub,sup{position:relative}.advantages::after,.common_info::after,.news_article_cover::after,.serv-list::after,.social_nets .social_nets::after,.titles::after{content:"";clear:both}.address_info,.menu-item,.nav_item,.nav_subitem,.partner,.serv-item{list-style:none}.wrapper{width:960px;margin:0 auto}/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}.advantage a,.menu-item a,.nav_subitem a,.serv-item a{text-decoration:none}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}dfn{font-style:italic}h1{font-size:2em;margin:.75em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}figure{margin:1.5em 40px}hr{box-sizing:content-box;height:0}button,input,optgroup,select,textarea{font:inherit;margin:0}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;display:table;max-width:100%;white-space:normal;color:inherit;padding:0}optgroup{font-weight:700}textarea{overflow:auto}.titles{margin:10px 0}.titles::after{display:block}.logo{width:206px}.social_nets{width:200px;float:right;top:0;left:794px;position:absolute;margin-left:10px}.social_nets .social_nets::after{display:block}.social_nets a{display:inline-block;float:left;margin:5px;padding:0}.social_nets .facebook{display:block;width:17px;height:24px;background-image:url(../img/facebook.png);background-position:0 -34px}.social_nets .in,.social_nets .rss,.social_nets .skype,.social_nets .twitter{height:24px;background-position:0 24px;margin:0;padding:0;display:block}.social_nets .twitter{width:23px;background-image:url(../img/twitter.png)}.social_nets .rss{width:23px;background-image:url(../img/rss.png)}.social_nets .in{width:24px;background-image:url(../img/linkedin.png)}.social_nets .skype{width:23px;background-image:url(../img/skype.png)}.social_nets span:hover{background-position:0 0}.menu--bar{background-color:#2a2d32;height:61px}.menu--bar .menu-list .item-home{margin-left:-40px;background-color:#248cec}.menu--bar input{background-color:#35383c;display:block;width:250px;height:30px;float:right;margin:12px 5px;text-indent:10px;font-size:12px;border:1px solid #181a1d;background-image:url(../img/search_icon.png);background-repeat:no-repeat;background-position:220px}.menu--bar input input[placeholder]{color:#626466}.menu-item{float:left;height:61px;width:100px;border-right:1px solid #181a1d;background-color:#2a2d32}.menu-item a{display:block;font:15px Tahoma,Verdana,Arial,sans-serif;color:#fff;text-align:center;margin:20px auto}.menu-item a:hover{color:#f4b60d}.blueberry{margin:0 auto}.blueberry .slides{display:block;position:relative;overflow:hidden;padding:0}.blueberry .slides li{position:absolute;top:0;left:0;overflow:hidden}.blueberry .slides li img{display:block;width:960px;height:350px;max-width:none}.blueberry .slides li.active{display:block;position:relative}.blueberry .crop li img{width:auto}.blueberry .pager{height:40px;text-align:center}.blueberry .pager li{display:inline-block}.blueberry .pager li a{display:block;height:10px;width:10px;padding:18px 8px;border-radius:6px}.blueberry .pager li a span{display:block;height:10px;width:10px;overflow:hidden;background:silver;text-indent:-9999px;border-radius:2px}.blueberry .pager li.active a span{background:#404040}.advantages::after{display:block}.advantage{float:left;width:23%;margin:20px 0;position:relative;padding-left:99px}.advantage a{display:block;color:currentColor}.van{margin:0 0 6px}.adv_descr{height:50px;overflow-y:hidden;text-align:justify}.adv_number{font-size:85px;font-weight:700;color:#e9e9ea;top:-18px;left:-3px;position:absolute}.adv_arrow,.adv_more:hover{color:#248cec}.adv_arrow{font-size:20px}.adv_more:hover .adv_arrow{color:#989fb3}.serv-heading,.serv-item{color:#fff;display:block}.serv-cover{background-color:#2a2d32;width:100%;height:400px}.serv-list::after{display:block}.serv-heading{width:115px;margin:0 60px;padding:30px 0 0}.serv-item{float:left;text-align:center;position:relative}.serv-item a{display:block;margin:50px 20px;color:currentColor}.serv-item img{width:180px;height:180px}.serv-item:hover .serv-overlay{display:block;width:180px;height:180px;z-index:1;position:absolute;left:20px;top:50px}.serv-overlay{display:none}p{color:#f4b60d}.common_info{width:100%;height:430px;background-color:#f7f7f7}.common_info::after{display:block}.banners,.news{float:left;width:50%;margin:10px 0}.news_article_cover{margin:25px 0}.news_article_cover::after{display:block}.news_cover_1,.news_cover_2,.news_machines,.news_service{display:block;float:left;width:60%;position:relative}.circle{position:absolute;top:0;left:0}.news_date{position:absolute;top:10px;left:-20px;z-index:1}.contacts,address{position:relative}.news_machines,.news_service{margin:-17px 0 0 161px}.news_machines a,.news_service a{text-decoration:none;color:currentColor;font-size:13px}.news_heading:hover{color:#3293ed}.news_author,.news_comments{color:#0187f4}.news_machines p,.news_service p{font-size:12px;color:#9b9b9b}.accordion{margin:0 0 30px;border-top:1px solid #DDD;border-radius:4px}.accordion dt{background:#fff;color:#000}.accordion dd{display:none;padding:30px;width:88%;height:80px;margin-left:0;color:#9b9b9b;border-bottom:1px solid #DDD;background:#FFF}.accordion dt{cursor:pointer;padding:12px 15px;margin:0;border:1px solid #e8e8e8}.accordion dt:before{content:"+";display:inline-block;text-align:center;margin-right:10px;-webkit-transition:all .3s linear;transition:all .3s linear;-webkit-transform:rotate(0);transform:rotate(0)}.accordion dt.accordion-active{color:#fff;background-color:#f4b60d;border:none}.accordion dt.accordion-active:before{content:"-";margin-right:10px}.contacts::after,.nav_list::after,.navigation::after,.partners_list::after{content:"";display:block;clear:both}.accordion dt.accordion-active:hover{cursor:default}.partners_list{height:130px}.partner{float:left;margin:30px 0}.navigation{background-color:#2a2d32;margin:20px 0 0}.nav_list{width:100%;float:left;margin:0 auto}.nav_item{float:left;width:23%;margin:20px 0;font-size:14px;color:#fff;text-transform:uppercase}.nav_item a{display:block;margin:20px 0}.nav_sublist:first-child{margin-top:20px}.nav_subitem a{color:#797a7c;width:150px;font-size:12px;text-transform:capitalize;margin:10px 0 10px -40px;border-bottom:1px solid #393c40}.nav_subitem:last-child a{border-bottom:none}.nav_subitem a:hover{color:#2582da}address{background-color:#35383c;margin:-16px 0 0;height:50px;font-size:10px;font-style:normal;text-align:justify}.address_info{float:left;margin:10px 20px;color:#6f7073}.address_geo img{position:absolute;top:12px;left:40px}.address_phone{margin:10px 0 0 15px}.address_phone img{position:absolute;top:12px;left:320px}.address_email img{position:absolute;top:16px;left:445px}.address_email{color:#868789;margin-left:45px}.address_rights{margin:10px 0 0 134px}
/*# sourceMappingURL=data:application/json;base64, */
